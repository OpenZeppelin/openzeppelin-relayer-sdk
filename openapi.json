{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenZeppelin Relayer API",
    "description": "OpenZeppelin Relayer API",
    "termsOfService": "https://www.openzeppelin.com/tos",
    "contact": {
      "name": "OpenZeppelin",
      "url": "https://www.openzeppelin.com"
    },
    "license": {
      "name": "AGPL-3.0 license",
      "url": "https://github.com/OpenZeppelin/openzeppelin-relayer/blob/main/LICENSE"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/relayers": {
      "get": {
        "tags": ["Relayers"],
        "summary": "Relayer routes implementation",
        "description": "Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file\n\nLists all relayers with pagination support.",
        "operationId": "listRelayers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (starts at 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relayer list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_Vec_RelayerResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}": {
      "get": {
        "tags": ["Relayers"],
        "summary": "Retrieves details of a specific relayer by ID.",
        "operationId": "getRelayer",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relayer details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_RelayerResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Relayer with ID relayer_id not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "patch": {
        "tags": ["Relayers"],
        "summary": "Updates a relayer's information based on the provided update request.",
        "operationId": "updateRelayer",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Relayer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_RelayerResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Relayer with ID relayer_id not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}/balance": {
      "get": {
        "tags": ["Relayers"],
        "summary": "Retrieves the balance of a specific relayer.",
        "operationId": "getRelayerBalance",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relayer balance retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_BalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Relayer with ID relayer_id not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}/rpc": {
      "post": {
        "tags": ["Relayers"],
        "summary": "Performs a JSON-RPC call using the specified relayer.",
        "operationId": "rpc",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON-RPC request with method and parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_NetworkRpcRequest"
              },
              "example": {
                "id": 1,
                "jsonrpc": "2.0",
                "method": "feeEstimate",
                "params": {
                  "fee_token": "SOL",
                  "network": "solana",
                  "transaction": "base64_encoded_transaction"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "RPC method executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_NetworkRpcResult"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Relayer with ID relayer_id not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}/sign": {
      "post": {
        "tags": ["Relayers"],
        "summary": "Signs data using the specified relayer.",
        "operationId": "sign",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Relayer signed data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_SignDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}/sign-typed-data": {
      "post": {
        "tags": ["Relayers"],
        "summary": "Signs typed data using the specified relayer.",
        "operationId": "signTypedData",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignTypedDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Relayer signed typed data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_SignDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Relayer with ID relayer_id not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}/status": {
      "get": {
        "tags": ["Relayers"],
        "summary": "Fetches the current status of a specific relayer.",
        "operationId": "getRelayerStatus",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relayer status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_RelayerStatus"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Relayer with ID relayer_id not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}/transactions": {
      "post": {
        "tags": ["Relayers"],
        "summary": "Sends a transaction through the specified relayer.",
        "operationId": "sendTransaction",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Relayer transactions sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Relayer with ID relayer_id not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}/transactions/": {
      "get": {
        "tags": ["Relayers"],
        "summary": "Lists all transactions for a specific relayer with pagination.",
        "operationId": "listTransactions",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (starts at 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relayer transactions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_Vec_TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Relayer with ID relayer_id not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}/transactions/by-nonce/{nonce}": {
      "get": {
        "tags": ["Relayers"],
        "summary": "Retrieves a transaction by its nonce value.",
        "operationId": "getTransactionByNonce",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nonce",
            "in": "path",
            "description": "The nonce of the transaction",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relayer transaction retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}/transactions/pending": {
      "delete": {
        "tags": ["Relayers"],
        "summary": "Deletes all pending transactions for a specific relayer.",
        "operationId": "deletePendingTransactions",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relayer pending transactions successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_DeletePendingTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Relayer with ID relayer_id not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/relayers/{relayer_id}/transactions/{transaction_id}": {
      "get": {
        "tags": ["Relayers"],
        "summary": "Retrieves a specific transaction by its ID.",
        "operationId": "getTransactionById",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The unique identifier of the transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relayer transaction retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Not Found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "put": {
        "tags": ["Relayers"],
        "summary": "Replaces a specific transaction with a new one.",
        "operationId": "replaceTransaction",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The unique identifier of the transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relayer transaction replaced successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "delete": {
        "tags": ["Relayers"],
        "summary": "Cancels a specific transaction by its ID.",
        "operationId": "cancelTransaction",
        "parameters": [
          {
            "name": "relayer_id",
            "in": "path",
            "description": "The unique identifier of the relayer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The unique identifier of the transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relayer transaction canceled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Bad Request",
                  "success": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Unauthorized",
                  "success": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Not found",
                  "success": false
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Too Many Requests",
                  "success": false
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_String"
                },
                "example": {
                  "data": null,
                  "message": "Internal Server Error",
                  "success": false
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/debug/metrics/scrape": {
      "get": {
        "tags": ["Metrics"],
        "summary": "Triggers an update of system metrics and returns the result in plain text format.",
        "description": "# Returns\n\nAn `HttpResponse` containing the updated metrics in plain text, or an error message if the\nupdate fails.",
        "operationId": "scrape_metrics",
        "responses": {
          "200": {
            "description": "Complete metrics in Prometheus exposition format",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": ["Metrics"],
        "summary": "Metrics routes implementation",
        "description": "Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file\nReturns a list of all available metric names in JSON format.\n\n# Returns\n\nAn `HttpResponse` containing a JSON array of metric names.",
        "operationId": "list_metrics",
        "responses": {
          "200": {
            "description": "Metric names list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/metrics/{metric_name}": {
      "get": {
        "tags": ["Metrics"],
        "summary": "Returns the details of a specific metric in plain text format.",
        "description": "# Parameters\n\n- `path`: The name of the metric to retrieve details for.\n\n# Returns\n\nAn `HttpResponse` containing the metric details in plain text, or a 404 error if the metric is\nnot found.",
        "operationId": "metric_detail",
        "parameters": [
          {
            "name": "metric_name",
            "in": "path",
            "description": "Name of the metric to retrieve, e.g. utopia_transactions_total",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metric details in Prometheus text format",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid API key"
          },
          "403": {
            "description": "Forbidden - insufficient permissions to access this metric"
          },
          "404": {
            "description": "Metric not found"
          },
          "429": {
            "description": "Too many requests - rate limit for metrics access exceeded"
          }
        },
        "security": [
          {
            "bearer_auth": ["metrics:read"]
          }
        ]
      }
    },
    "/v1/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Health routes implementation",
        "description": "Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file\nHandles the `/health` endpoint.\n\nReturns an `HttpResponse` with a status of `200 OK` and a body of `\"OK\"`.",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiResponse_BalanceResponse": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "data": {
            "type": "object",
            "required": ["balance", "unit"],
            "properties": {
              "balance": {
                "type": "integer",
                "minimum": 0
              },
              "unit": {
                "type": "string",
                "example": "wei"
              }
            }
          },
          "error": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApiResponse_DeletePendingTransactionsResponse": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "queued_for_cancellation_transaction_ids",
              "failed_to_queue_transaction_ids",
              "total_processed"
            ],
            "properties": {
              "failed_to_queue_transaction_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "queued_for_cancellation_transaction_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "total_processed": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "error": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApiResponse_RelayerResponse": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "data": {
            "type": "object",
            "required": ["id", "name", "network", "network_type", "paused", "policies", "address", "system_disabled"],
            "properties": {
              "address": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "network": {
                "type": "string"
              },
              "network_type": {
                "$ref": "#/components/schemas/NetworkType"
              },
              "paused": {
                "type": "boolean"
              },
              "policies": {
                "$ref": "#/components/schemas/NetworkPolicyResponse"
              },
              "system_disabled": {
                "type": "boolean"
              }
            }
          },
          "error": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApiResponse_RelayerStatus": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "balance",
                  "pending_transactions_count",
                  "system_disabled",
                  "paused",
                  "nonce",
                  "network_type"
                ],
                "properties": {
                  "balance": {
                    "type": "string"
                  },
                  "last_confirmed_transaction_timestamp": {
                    "type": ["string", "null"]
                  },
                  "network_type": {
                    "type": "string",
                    "enum": ["evm"]
                  },
                  "nonce": {
                    "type": "string"
                  },
                  "paused": {
                    "type": "boolean"
                  },
                  "pending_transactions_count": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "system_disabled": {
                    "type": "boolean"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "balance",
                  "pending_transactions_count",
                  "system_disabled",
                  "paused",
                  "sequence_number",
                  "network_type"
                ],
                "properties": {
                  "balance": {
                    "type": "string"
                  },
                  "last_confirmed_transaction_timestamp": {
                    "type": ["string", "null"]
                  },
                  "network_type": {
                    "type": "string",
                    "enum": ["stellar"]
                  },
                  "paused": {
                    "type": "boolean"
                  },
                  "pending_transactions_count": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "sequence_number": {
                    "type": "string"
                  },
                  "system_disabled": {
                    "type": "boolean"
                  }
                }
              }
            ]
          },
          "error": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApiResponse_SignDataResponse": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SignDataResponseEvm"
              },
              {
                "$ref": "#/components/schemas/SignDataResponseSolana"
              }
            ]
          },
          "error": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApiResponse_String": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "data": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApiResponse_TransactionResponse": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EvmTransactionResponse"
              },
              {
                "$ref": "#/components/schemas/SolanaTransactionResponse"
              },
              {
                "$ref": "#/components/schemas/StellarTransactionResponse"
              }
            ]
          },
          "error": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApiResponse_Vec_RelayerResponse": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id", "name", "network", "network_type", "paused", "policies", "address", "system_disabled"],
              "properties": {
                "address": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "network": {
                  "type": "string"
                },
                "network_type": {
                  "$ref": "#/components/schemas/NetworkType"
                },
                "paused": {
                  "type": "boolean"
                },
                "policies": {
                  "$ref": "#/components/schemas/NetworkPolicyResponse"
                },
                "system_disabled": {
                  "type": "boolean"
                }
              }
            }
          },
          "error": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApiResponse_Vec_TransactionResponse": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EvmTransactionResponse"
                },
                {
                  "$ref": "#/components/schemas/SolanaTransactionResponse"
                },
                {
                  "$ref": "#/components/schemas/StellarTransactionResponse"
                }
              ]
            }
          },
          "error": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "AssetSpec": {
        "oneOf": [
          {
            "type": "object",
            "required": ["type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["native"]
              }
            }
          },
          {
            "type": "object",
            "required": ["code", "issuer", "type"],
            "properties": {
              "code": {
                "type": "string"
              },
              "issuer": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": ["credit4"]
              }
            }
          },
          {
            "type": "object",
            "required": ["code", "issuer", "type"],
            "properties": {
              "code": {
                "type": "string"
              },
              "issuer": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": ["credit12"]
              }
            }
          }
        ]
      },
      "AuthSpec": {
        "oneOf": [
          {
            "type": "object",
            "description": "No authorization required",
            "required": ["type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["none"]
              }
            }
          },
          {
            "type": "object",
            "description": "Use the transaction source account for authorization",
            "required": ["type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["source_account"]
              }
            }
          },
          {
            "type": "object",
            "description": "Use specific addresses for authorization",
            "required": ["signers", "type"],
            "properties": {
              "signers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": ["addresses"]
              }
            }
          },
          {
            "type": "object",
            "description": "Advanced format - provide complete XDR auth entries as base64-encoded strings",
            "required": ["entries", "type"],
            "properties": {
              "entries": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": ["xdr"]
              }
            }
          }
        ],
        "description": "Authorization specification for Soroban operations"
      },
      "BalanceResponse": {
        "type": "object",
        "required": ["balance", "unit"],
        "properties": {
          "balance": {
            "type": "integer",
            "minimum": 0
          },
          "unit": {
            "type": "string",
            "example": "wei"
          }
        }
      },
      "ContractSource": {
        "oneOf": [
          {
            "type": "object",
            "required": ["address", "from"],
            "properties": {
              "address": {
                "type": "string"
              },
              "from": {
                "type": "string",
                "enum": ["address"]
              }
            }
          },
          {
            "type": "object",
            "required": ["contract", "from"],
            "properties": {
              "contract": {
                "type": "string"
              },
              "from": {
                "type": "string",
                "enum": ["contract"]
              }
            }
          }
        ],
        "description": "Represents the source for contract creation"
      },
      "DeletePendingTransactionsResponse": {
        "type": "object",
        "required": ["queued_for_cancellation_transaction_ids", "failed_to_queue_transaction_ids", "total_processed"],
        "properties": {
          "failed_to_queue_transaction_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "queued_for_cancellation_transaction_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total_processed": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "EncodedSerializedTransaction": {
        "type": "string"
      },
      "EvmPolicyResponse": {
        "type": "object",
        "required": ["private_transactions", "min_balance"],
        "properties": {
          "eip1559_pricing": {
            "type": "boolean"
          },
          "gas_price_cap": {
            "type": "integer",
            "minimum": 0
          },
          "min_balance": {
            "type": "integer",
            "minimum": 0
          },
          "private_transactions": {
            "type": "boolean"
          },
          "whitelist_receivers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EvmRpcRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": ["method", "params"],
            "properties": {
              "method": {
                "type": "string"
              },
              "params": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": ["method", "params"],
            "properties": {
              "method": {
                "type": "string"
              },
              "params": {}
            }
          }
        ]
      },
      "EvmRpcResult": {
        "oneOf": [
          {
            "type": "string"
          },
          {}
        ]
      },
      "EvmTransactionRequest": {
        "type": "object",
        "required": ["value", "gas_limit"],
        "properties": {
          "data": {
            "type": "string"
          },
          "gas_limit": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "gas_price": {
            "type": "integer",
            "minimum": 0
          },
          "max_fee_per_gas": {
            "type": "integer",
            "minimum": 0
          },
          "max_priority_fee_per_gas": {
            "type": "integer",
            "minimum": 0
          },
          "speed": {
            "$ref": "#/components/schemas/Speed"
          },
          "to": {
            "type": "string"
          },
          "valid_until": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "u128",
            "minimum": 0
          }
        }
      },
      "EvmTransactionResponse": {
        "type": "object",
        "required": ["id", "status", "created_at", "gas_limit", "value", "from", "relayer_id"],
        "properties": {
          "confirmed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "gas_limit": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "gas_price": {
            "type": "integer",
            "minimum": 0
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "relayer_id": {
            "type": "string"
          },
          "sent_at": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "status_reason": {
            "type": ["string", "null"]
          },
          "to": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FeeEstimateRequestParams": {
        "type": "object",
        "required": ["transaction", "fee_token"],
        "properties": {
          "fee_token": {
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/EncodedSerializedTransaction"
          }
        },
        "additionalProperties": false
      },
      "FeeEstimateResult": {
        "type": "object",
        "required": ["estimated_fee", "conversion_rate"],
        "properties": {
          "conversion_rate": {
            "type": "string"
          },
          "estimated_fee": {
            "type": "string"
          }
        }
      },
      "GetFeaturesEnabledRequestParams": {
        "type": "object",
        "additionalProperties": false
      },
      "GetFeaturesEnabledResult": {
        "type": "object",
        "required": ["features"],
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetSupportedTokensItem": {
        "type": "object",
        "required": ["mint", "symbol", "decimals"],
        "properties": {
          "conversion_slippage_percentage": {
            "type": "number",
            "format": "float"
          },
          "decimals": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "max_allowed_fee": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "mint": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "GetSupportedTokensRequestParams": {
        "type": "object",
        "additionalProperties": false
      },
      "GetSupportedTokensResult": {
        "type": "object",
        "required": ["tokens"],
        "properties": {
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSupportedTokensItem"
            }
          }
        }
      },
      "JsonRpcError": {
        "type": "object",
        "description": "JSON-RPC 2.0 Error structure.\n\nRepresents an error in a JSON-RPC response.",
        "required": ["code", "message", "description"],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "JsonRpcId": {
        "oneOf": [
          {
            "type": "string",
            "description": "String identifier"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Numeric identifier (should not contain fractional parts per spec)"
          }
        ],
        "description": "Represents a JSON-RPC 2.0 ID value.\nAccording to the spec, the ID can be a String or Number.\nWhen used in Option<JsonRpcId>: Some(id) = actual ID, None = explicit null."
      },
      "JsonRpcRequest_NetworkRpcRequest": {
        "allOf": [
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SolanaRpcRequest"
              },
              {
                "$ref": "#/components/schemas/StellarRpcRequest"
              },
              {
                "$ref": "#/components/schemas/EvmRpcRequest"
              }
            ]
          },
          {
            "type": "object",
            "required": ["jsonrpc"],
            "properties": {
              "id": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/JsonRpcId"
                  }
                ]
              },
              "jsonrpc": {
                "type": "string"
              }
            }
          }
        ],
        "description": "JSON-RPC 2.0 Request structure.\n\nRepresents a JSON-RPC request with proper ID handling:\n- `Some(JsonRpcId)` = request with ID\n- `None` = explicit null ID or notification"
      },
      "JsonRpcResponse_NetworkRpcResult": {
        "type": "object",
        "description": "JSON-RPC 2.0 Response structure.\n\nRepresents a JSON-RPC response that can contain either a result or an error.",
        "required": ["jsonrpc"],
        "properties": {
          "error": {
            "$ref": "#/components/schemas/JsonRpcError"
          },
          "id": {
            "$ref": "#/components/schemas/JsonRpcId"
          },
          "jsonrpc": {
            "type": "string"
          },
          "result": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SolanaRpcResult"
              },
              {
                "$ref": "#/components/schemas/StellarRpcResult"
              },
              {
                "$ref": "#/components/schemas/EvmRpcResult"
              }
            ]
          }
        }
      },
      "JupiterSwapOptions": {
        "type": "object",
        "properties": {
          "dynamic_compute_unit_limit": {
            "type": ["boolean", "null"]
          },
          "priority_fee_max_lamports": {
            "type": ["integer", "null"],
            "format": "int64",
            "minimum": 0
          },
          "priority_level": {
            "type": ["string", "null"]
          }
        },
        "additionalProperties": false
      },
      "MemoSpec": {
        "oneOf": [
          {
            "type": "object",
            "required": ["type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["none"]
              }
            }
          },
          {
            "type": "object",
            "required": ["value", "type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["text"]
              },
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": ["value", "type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["id"]
              },
              "value": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": ["value", "type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["hash"]
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            }
          },
          {
            "type": "object",
            "required": ["value", "type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["return"]
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            }
          }
        ]
      },
      "NetworkPolicyResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EvmPolicyResponse"
          },
          {
            "$ref": "#/components/schemas/SolanaPolicyResponse"
          },
          {
            "$ref": "#/components/schemas/StellarPolicyResponse"
          }
        ]
      },
      "NetworkRpcRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SolanaRpcRequest"
          },
          {
            "$ref": "#/components/schemas/StellarRpcRequest"
          },
          {
            "$ref": "#/components/schemas/EvmRpcRequest"
          }
        ]
      },
      "NetworkRpcResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SolanaRpcResult"
          },
          {
            "$ref": "#/components/schemas/StellarRpcResult"
          },
          {
            "$ref": "#/components/schemas/EvmRpcResult"
          }
        ]
      },
      "NetworkTransactionRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EvmTransactionRequest"
          },
          {
            "$ref": "#/components/schemas/SolanaTransactionRequest"
          },
          {
            "$ref": "#/components/schemas/StellarTransactionRequest"
          }
        ]
      },
      "NetworkType": {
        "type": "string",
        "enum": ["evm", "stellar", "solana"]
      },
      "OperationSpec": {
        "oneOf": [
          {
            "type": "object",
            "required": ["destination", "amount", "asset", "type"],
            "properties": {
              "amount": {
                "type": "integer",
                "format": "int64"
              },
              "asset": {
                "$ref": "#/components/schemas/AssetSpec"
              },
              "destination": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": ["payment"]
              }
            }
          },
          {
            "type": "object",
            "required": ["contract_address", "function_name", "args", "type"],
            "properties": {
              "args": {
                "type": "array",
                "items": {}
              },
              "auth": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/AuthSpec"
                  }
                ]
              },
              "contract_address": {
                "type": "string"
              },
              "function_name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": ["invoke_contract"]
              }
            }
          },
          {
            "type": "object",
            "required": ["source", "wasm_hash", "type"],
            "properties": {
              "auth": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/AuthSpec"
                  }
                ]
              },
              "constructor_args": {
                "type": ["array", "null"],
                "items": {}
              },
              "salt": {
                "type": ["string", "null"]
              },
              "source": {
                "$ref": "#/components/schemas/ContractSource"
              },
              "type": {
                "type": "string",
                "enum": ["create_contract"]
              },
              "wasm_hash": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": ["wasm", "type"],
            "properties": {
              "auth": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/AuthSpec"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": ["upload_wasm"]
              },
              "wasm": {
                "$ref": "#/components/schemas/WasmSource"
              }
            }
          }
        ]
      },
      "PaginationMeta": {
        "type": "object",
        "required": ["current_page", "per_page", "total_items"],
        "properties": {
          "current_page": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "total_items": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "PrepareTransactionRequestParams": {
        "type": "object",
        "required": ["transaction", "fee_token"],
        "properties": {
          "fee_token": {
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/EncodedSerializedTransaction"
          }
        },
        "additionalProperties": false
      },
      "PrepareTransactionResult": {
        "type": "object",
        "required": ["transaction", "fee_in_spl", "fee_in_lamports", "fee_token", "valid_until_blockheight"],
        "properties": {
          "fee_in_lamports": {
            "type": "string"
          },
          "fee_in_spl": {
            "type": "string"
          },
          "fee_token": {
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/EncodedSerializedTransaction"
          },
          "valid_until_blockheight": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "RelayerResponse": {
        "type": "object",
        "required": ["id", "name", "network", "network_type", "paused", "policies", "address", "system_disabled"],
        "properties": {
          "address": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "network_type": {
            "$ref": "#/components/schemas/NetworkType"
          },
          "paused": {
            "type": "boolean"
          },
          "policies": {
            "$ref": "#/components/schemas/NetworkPolicyResponse"
          },
          "system_disabled": {
            "type": "boolean"
          }
        }
      },
      "RelayerSolanaSwapConfig": {
        "type": "object",
        "properties": {
          "cron_schedule": {
            "type": ["string", "null"]
          },
          "jupiter_swap_options": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/JupiterSwapOptions"
              }
            ]
          },
          "min_balance_threshold": {
            "type": ["integer", "null"],
            "format": "int64",
            "minimum": 0
          },
          "strategy": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SolanaSwapStrategy"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "RelayerStatus": {
        "oneOf": [
          {
            "type": "object",
            "required": ["balance", "pending_transactions_count", "system_disabled", "paused", "nonce", "network_type"],
            "properties": {
              "balance": {
                "type": "string"
              },
              "last_confirmed_transaction_timestamp": {
                "type": ["string", "null"]
              },
              "network_type": {
                "type": "string",
                "enum": ["evm"]
              },
              "nonce": {
                "type": "string"
              },
              "paused": {
                "type": "boolean"
              },
              "pending_transactions_count": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "system_disabled": {
                "type": "boolean"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "balance",
              "pending_transactions_count",
              "system_disabled",
              "paused",
              "sequence_number",
              "network_type"
            ],
            "properties": {
              "balance": {
                "type": "string"
              },
              "last_confirmed_transaction_timestamp": {
                "type": ["string", "null"]
              },
              "network_type": {
                "type": "string",
                "enum": ["stellar"]
              },
              "paused": {
                "type": "boolean"
              },
              "pending_transactions_count": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "sequence_number": {
                "type": "string"
              },
              "system_disabled": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "RelayerUpdateRequest": {
        "type": "object",
        "properties": {
          "paused": {
            "type": "boolean"
          }
        }
      },
      "SignAndSendTransactionRequestParams": {
        "type": "object",
        "required": ["transaction"],
        "properties": {
          "transaction": {
            "$ref": "#/components/schemas/EncodedSerializedTransaction"
          }
        },
        "additionalProperties": false
      },
      "SignAndSendTransactionResult": {
        "type": "object",
        "required": ["transaction", "signature"],
        "properties": {
          "signature": {
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/EncodedSerializedTransaction"
          }
        }
      },
      "SignDataRequest": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "SignDataResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SignDataResponseEvm"
          },
          {
            "$ref": "#/components/schemas/SignDataResponseSolana"
          }
        ]
      },
      "SignDataResponseEvm": {
        "type": "object",
        "required": ["r", "s", "v", "sig"],
        "properties": {
          "r": {
            "type": "string"
          },
          "s": {
            "type": "string"
          },
          "sig": {
            "type": "string"
          },
          "v": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "SignDataResponseSolana": {
        "type": "object",
        "required": ["signature", "public_key"],
        "properties": {
          "public_key": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "SignTransactionRequestParams": {
        "type": "object",
        "required": ["transaction"],
        "properties": {
          "transaction": {
            "$ref": "#/components/schemas/EncodedSerializedTransaction"
          }
        },
        "additionalProperties": false
      },
      "SignTransactionResult": {
        "type": "object",
        "required": ["transaction", "signature"],
        "properties": {
          "signature": {
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/EncodedSerializedTransaction"
          }
        }
      },
      "SignTypedDataRequest": {
        "type": "object",
        "required": ["domain_separator", "hash_struct_message"],
        "properties": {
          "domain_separator": {
            "type": "string"
          },
          "hash_struct_message": {
            "type": "string"
          }
        }
      },
      "SolanaAllowedTokensPolicy": {
        "type": "object",
        "required": ["mint"],
        "properties": {
          "decimals": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "max_allowed_fee": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "mint": {
            "type": "string"
          },
          "swap_config": {
            "$ref": "#/components/schemas/SolanaAllowedTokensSwapConfig"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "SolanaAllowedTokensSwapConfig": {
        "type": "object",
        "properties": {
          "max_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "min_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "retain_min_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "slippage_percentage": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "SolanaFeePaymentStrategy": {
        "type": "string",
        "enum": ["user", "relayer"]
      },
      "SolanaPolicyResponse": {
        "type": "object",
        "required": ["fee_payment_strategy", "max_tx_data_size", "min_balance"],
        "properties": {
          "allowed_accounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_programs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolanaAllowedTokensPolicy"
            }
          },
          "disallowed_accounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fee_margin_percentage": {
            "type": ["number", "null"],
            "format": "float"
          },
          "fee_payment_strategy": {
            "$ref": "#/components/schemas/SolanaFeePaymentStrategy"
          },
          "max_allowed_fee_lamports": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "max_signatures": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "max_tx_data_size": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "min_balance": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "swap_config": {
            "$ref": "#/components/schemas/RelayerSolanaSwapConfig"
          }
        }
      },
      "SolanaRpcRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": ["params", "method"],
            "properties": {
              "method": {
                "type": "string",
                "enum": ["feeEstimate"]
              },
              "params": {
                "$ref": "#/components/schemas/FeeEstimateRequestParams"
              }
            },
            "example": "feeEstimate"
          },
          {
            "type": "object",
            "required": ["params", "method"],
            "properties": {
              "method": {
                "type": "string",
                "enum": ["transferTransaction"]
              },
              "params": {
                "$ref": "#/components/schemas/TransferTransactionRequestParams"
              }
            },
            "example": "transferTransaction"
          },
          {
            "type": "object",
            "required": ["params", "method"],
            "properties": {
              "method": {
                "type": "string",
                "enum": ["prepareTransaction"]
              },
              "params": {
                "$ref": "#/components/schemas/PrepareTransactionRequestParams"
              }
            },
            "example": "prepareTransaction"
          },
          {
            "type": "object",
            "required": ["params", "method"],
            "properties": {
              "method": {
                "type": "string",
                "enum": ["signTransaction"]
              },
              "params": {
                "$ref": "#/components/schemas/SignTransactionRequestParams"
              }
            },
            "example": "signTransaction"
          },
          {
            "type": "object",
            "required": ["params", "method"],
            "properties": {
              "method": {
                "type": "string",
                "enum": ["signAndSendTransaction"]
              },
              "params": {
                "$ref": "#/components/schemas/SignAndSendTransactionRequestParams"
              }
            },
            "example": "signAndSendTransaction"
          },
          {
            "type": "object",
            "required": ["params", "method"],
            "properties": {
              "method": {
                "type": "string",
                "enum": ["getSupportedTokens"]
              },
              "params": {
                "$ref": "#/components/schemas/GetSupportedTokensRequestParams"
              }
            },
            "example": "getSupportedTokens"
          },
          {
            "type": "object",
            "required": ["params", "method"],
            "properties": {
              "method": {
                "type": "string",
                "enum": ["getFeaturesEnabled"]
              },
              "params": {
                "$ref": "#/components/schemas/GetFeaturesEnabledRequestParams"
              }
            },
            "example": "getFeaturesEnabled"
          }
        ]
      },
      "SolanaRpcResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/FeeEstimateResult"
          },
          {
            "$ref": "#/components/schemas/TransferTransactionResult"
          },
          {
            "$ref": "#/components/schemas/PrepareTransactionResult"
          },
          {
            "$ref": "#/components/schemas/SignTransactionResult"
          },
          {
            "$ref": "#/components/schemas/SignAndSendTransactionResult"
          },
          {
            "$ref": "#/components/schemas/GetSupportedTokensResult"
          },
          {
            "$ref": "#/components/schemas/GetFeaturesEnabledResult"
          }
        ]
      },
      "SolanaSwapStrategy": {
        "type": "string",
        "enum": ["jupiter-swap", "jupiter-ultra", "noop"]
      },
      "SolanaTransactionRequest": {
        "type": "object",
        "required": ["fee_payer", "instructions"],
        "properties": {
          "fee_payer": {
            "type": "string"
          },
          "instructions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SolanaTransactionResponse": {
        "type": "object",
        "required": ["id", "status", "created_at", "recent_blockhash", "fee_payer"],
        "properties": {
          "confirmed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "fee_payer": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "recent_blockhash": {
            "type": "string"
          },
          "sent_at": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          }
        }
      },
      "Speed": {
        "type": "string",
        "enum": ["fastest", "fast", "average", "safeLow"]
      },
      "StellarPolicyResponse": {
        "type": "object",
        "required": ["min_balance"],
        "properties": {
          "max_fee": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "min_balance": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "StellarRpcRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": ["params", "method"],
            "properties": {
              "method": {
                "type": "string",
                "enum": ["GenericRpcRequest"]
              },
              "params": {
                "type": "string"
              }
            }
          }
        ]
      },
      "StellarRpcResult": {
        "oneOf": [
          {
            "type": "string"
          }
        ]
      },
      "StellarTransactionRequest": {
        "type": "object",
        "required": ["source_account", "network", "operations"],
        "properties": {
          "memo": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MemoSpec"
              }
            ]
          },
          "network": {
            "type": "string"
          },
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationSpec"
            }
          },
          "source_account": {
            "type": "string"
          },
          "valid_until": {
            "type": ["string", "null"]
          }
        }
      },
      "StellarTransactionResponse": {
        "type": "object",
        "required": ["id", "status", "created_at", "source_account", "fee", "sequence_number"],
        "properties": {
          "confirmed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "sent_at": {
            "type": "string"
          },
          "sequence_number": {
            "type": "integer",
            "format": "int64"
          },
          "source_account": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          }
        }
      },
      "TransactionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EvmTransactionResponse"
          },
          {
            "$ref": "#/components/schemas/SolanaTransactionResponse"
          },
          {
            "$ref": "#/components/schemas/StellarTransactionResponse"
          }
        ]
      },
      "TransactionStatus": {
        "type": "string",
        "enum": ["canceled", "pending", "sent", "submitted", "mined", "confirmed", "failed", "expired"]
      },
      "TransferTransactionRequestParams": {
        "type": "object",
        "required": ["amount", "token", "source", "destination"],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "destination": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TransferTransactionResult": {
        "type": "object",
        "required": ["transaction", "fee_in_spl", "fee_in_lamports", "fee_token", "valid_until_blockheight"],
        "properties": {
          "fee_in_lamports": {
            "type": "string"
          },
          "fee_in_spl": {
            "type": "string"
          },
          "fee_token": {
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/EncodedSerializedTransaction"
          },
          "valid_until_blockheight": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "WasmSource": {
        "oneOf": [
          {
            "type": "object",
            "required": ["hex"],
            "properties": {
              "hex": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": ["base64"],
            "properties": {
              "base64": {
                "type": "string"
              }
            }
          }
        ],
        "description": "Represents different ways to provide WASM code"
      }
    },
    "securitySchemes": {
      "bearer_auth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Relayers",
      "description": "Relayers are the core components of the OpenZeppelin Relayer API. They are responsible for executing transactions on behalf of users and providing a secure and reliable way to interact with the blockchain."
    },
    {
      "name": "Metrics",
      "description": "Metrics are responsible for showing the metrics related to the relayers."
    },
    {
      "name": "Health",
      "description": "Health is responsible for showing the health of the relayers."
    }
  ]
}
