/* tslint:disable */
/* eslint-disable */
/**
 * OpenZeppelin Relayer API
 * OpenZeppelin Relayer API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file Returns a list of all available metric names in JSON format.  # Returns  An `HttpResponse` containing a JSON array of metric names.
         * @summary Metrics routes implementation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMetrics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # Parameters  - `path`: The name of the metric to retrieve details for.  # Returns  An `HttpResponse` containing the metric details in plain text, or a 404 error if the metric is not found.
         * @summary Returns the details of a specific metric in plain text format.
         * @param {string} metricName Name of the metric to retrieve, e.g. utopia_transactions_total
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricDetail: async (metricName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricName' is not null or undefined
            assertParamExists('metricDetail', 'metricName', metricName)
            const localVarPath = `/metrics/{metric_name}`
                .replace(`{${"metric_name"}}`, encodeURIComponent(String(metricName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # Returns  An `HttpResponse` containing the updated metrics in plain text, or an error message if the update fails.
         * @summary Triggers an update of system metrics and returns the result in plain text format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapeMetrics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/debug/metrics/scrape`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file Returns a list of all available metric names in JSON format.  # Returns  An `HttpResponse` containing a JSON array of metric names.
         * @summary Metrics routes implementation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMetrics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMetrics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.listMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * # Parameters  - `path`: The name of the metric to retrieve details for.  # Returns  An `HttpResponse` containing the metric details in plain text, or a 404 error if the metric is not found.
         * @summary Returns the details of a specific metric in plain text format.
         * @param {string} metricName Name of the metric to retrieve, e.g. utopia_transactions_total
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metricDetail(metricName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metricDetail(metricName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.metricDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * # Returns  An `HttpResponse` containing the updated metrics in plain text, or an error message if the update fails.
         * @summary Triggers an update of system metrics and returns the result in plain text format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scrapeMetrics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scrapeMetrics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.scrapeMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricsApiFp(configuration)
    return {
        /**
         * Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file Returns a list of all available metric names in JSON format.  # Returns  An `HttpResponse` containing a JSON array of metric names.
         * @summary Metrics routes implementation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMetrics(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.listMetrics(options).then((request) => request(axios, basePath));
        },
        /**
         * # Parameters  - `path`: The name of the metric to retrieve details for.  # Returns  An `HttpResponse` containing the metric details in plain text, or a 404 error if the metric is not found.
         * @summary Returns the details of a specific metric in plain text format.
         * @param {string} metricName Name of the metric to retrieve, e.g. utopia_transactions_total
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricDetail(metricName: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.metricDetail(metricName, options).then((request) => request(axios, basePath));
        },
        /**
         * # Returns  An `HttpResponse` containing the updated metrics in plain text, or an error message if the update fails.
         * @summary Triggers an update of system metrics and returns the result in plain text format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapeMetrics(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.scrapeMetrics(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
    /**
     * Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file Returns a list of all available metric names in JSON format.  # Returns  An `HttpResponse` containing a JSON array of metric names.
     * @summary Metrics routes implementation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public listMetrics(options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).listMetrics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # Parameters  - `path`: The name of the metric to retrieve details for.  # Returns  An `HttpResponse` containing the metric details in plain text, or a 404 error if the metric is not found.
     * @summary Returns the details of a specific metric in plain text format.
     * @param {string} metricName Name of the metric to retrieve, e.g. utopia_transactions_total
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public metricDetail(metricName: string, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).metricDetail(metricName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # Returns  An `HttpResponse` containing the updated metrics in plain text, or an error message if the update fails.
     * @summary Triggers an update of system metrics and returns the result in plain text format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public scrapeMetrics(options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).scrapeMetrics(options).then((request) => request(this.axios, this.basePath));
    }
}

