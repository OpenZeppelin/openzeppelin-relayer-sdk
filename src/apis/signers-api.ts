/* tslint:disable */
/* eslint-disable */
/**
 * OpenZeppelin Relayer API
 * OpenZeppelin Relayer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseSignerResponse } from '../models';
// @ts-ignore
import type { ApiResponseString } from '../models';
// @ts-ignore
import type { ApiResponseVecSignerResponse } from '../models';
// @ts-ignore
import type { SignerCreateRequest } from '../models';
/**
 * SignersApi - axios parameter creator
 * @export
 */
export const SignersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new signer.
         * @param {SignerCreateRequest} signerCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSigner: async (signerCreateRequest: SignerCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signerCreateRequest' is not null or undefined
            assertParamExists('createSigner', 'signerCreateRequest', signerCreateRequest)
            const localVarPath = `/api/v1/signers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signerCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a signer by ID.
         * @param {string} signerId Signer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSigner: async (signerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signerId' is not null or undefined
            assertParamExists('deleteSigner', 'signerId', signerId)
            const localVarPath = `/api/v1/signers/{signer_id}`
                .replace(`{${"signer_id"}}`, encodeURIComponent(String(signerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves details of a specific signer by ID.
         * @param {string} signerId Signer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigner: async (signerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signerId' is not null or undefined
            assertParamExists('getSigner', 'signerId', signerId)
            const localVarPath = `/api/v1/signers/{signer_id}`
                .replace(`{${"signer_id"}}`, encodeURIComponent(String(signerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file  Lists all signers with pagination support.
         * @summary Signer routes implementation
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSigners: async (page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/signers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing signer.
         * @param {string} signerId Signer ID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSigner: async (signerId: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signerId' is not null or undefined
            assertParamExists('updateSigner', 'signerId', signerId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateSigner', 'body', body)
            const localVarPath = `/api/v1/signers/{signer_id}`
                .replace(`{${"signer_id"}}`, encodeURIComponent(String(signerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignersApi - functional programming interface
 * @export
 */
export const SignersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new signer.
         * @param {SignerCreateRequest} signerCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSigner(signerCreateRequest: SignerCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseSignerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSigner(signerCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignersApi.createSigner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes a signer by ID.
         * @param {string} signerId Signer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSigner(signerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSigner(signerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignersApi.deleteSigner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves details of a specific signer by ID.
         * @param {string} signerId Signer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSigner(signerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseSignerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSigner(signerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignersApi.getSigner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file  Lists all signers with pagination support.
         * @summary Signer routes implementation
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSigners(page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVecSignerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSigners(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignersApi.listSigners']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an existing signer.
         * @param {string} signerId Signer ID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSigner(signerId: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseSignerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSigner(signerId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignersApi.updateSigner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SignersApi - factory interface
 * @export
 */
export const SignersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignersApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new signer.
         * @param {SignerCreateRequest} signerCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSigner(signerCreateRequest: SignerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseSignerResponse> {
            return localVarFp.createSigner(signerCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a signer by ID.
         * @param {string} signerId Signer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSigner(signerId: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.deleteSigner(signerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves details of a specific signer by ID.
         * @param {string} signerId Signer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigner(signerId: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseSignerResponse> {
            return localVarFp.getSigner(signerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file  Lists all signers with pagination support.
         * @summary Signer routes implementation
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSigners(page?: number, perPage?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVecSignerResponse> {
            return localVarFp.listSigners(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing signer.
         * @param {string} signerId Signer ID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSigner(signerId: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseSignerResponse> {
            return localVarFp.updateSigner(signerId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignersApi - object-oriented interface
 * @export
 * @class SignersApi
 * @extends {BaseAPI}
 */
export class SignersApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new signer.
     * @param {SignerCreateRequest} signerCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignersApi
     */
    public createSigner(signerCreateRequest: SignerCreateRequest, options?: RawAxiosRequestConfig) {
        return SignersApiFp(this.configuration).createSigner(signerCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a signer by ID.
     * @param {string} signerId Signer ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignersApi
     */
    public deleteSigner(signerId: string, options?: RawAxiosRequestConfig) {
        return SignersApiFp(this.configuration).deleteSigner(signerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves details of a specific signer by ID.
     * @param {string} signerId Signer ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignersApi
     */
    public getSigner(signerId: string, options?: RawAxiosRequestConfig) {
        return SignersApiFp(this.configuration).getSigner(signerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: OpenAPI documentation for these endpoints can be found in the `openapi.rs` file  Lists all signers with pagination support.
     * @summary Signer routes implementation
     * @param {number} [page] Page number for pagination (starts at 1)
     * @param {number} [perPage] Number of items per page (default: 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignersApi
     */
    public listSigners(page?: number, perPage?: number, options?: RawAxiosRequestConfig) {
        return SignersApiFp(this.configuration).listSigners(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing signer.
     * @param {string} signerId Signer ID
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignersApi
     */
    public updateSigner(signerId: string, body: object, options?: RawAxiosRequestConfig) {
        return SignersApiFp(this.configuration).updateSigner(signerId, body, options).then((request) => request(this.axios, this.basePath));
    }
}

