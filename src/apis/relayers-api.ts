/* tslint:disable */
/* eslint-disable */
/**
 * OpenZeppelin Relayer API
 * OpenZeppelin Relayer API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseBalanceResponse } from '../models';
// @ts-ignore
import type { ApiResponseBool } from '../models';
// @ts-ignore
import type { ApiResponseRelayerResponse } from '../models';
// @ts-ignore
import type { ApiResponseSignDataResponse } from '../models';
// @ts-ignore
import type { ApiResponseString } from '../models';
// @ts-ignore
import type { ApiResponseTransactionResponse } from '../models';
// @ts-ignore
import type { ApiResponseVecRelayerResponse } from '../models';
// @ts-ignore
import type { ApiResponseVecTransactionResponse } from '../models';
// @ts-ignore
import type { JsonRpcRequestNetworkRpcRequest } from '../models';
// @ts-ignore
import type { JsonRpcResponseNetworkRpcResult } from '../models';
// @ts-ignore
import type { NetworkTransactionRequest } from '../models';
// @ts-ignore
import type { RelayerUpdateRequest } from '../models';
// @ts-ignore
import type { SignDataRequest } from '../models';
// @ts-ignore
import type { SignTypedDataRequest } from '../models';
/**
 * RelayersApi - axios parameter creator
 * @export
 */
export const RelayersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancels a specific transaction by its ID.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {string} transactionId The unique identifier of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTransaction: async (relayerId: string, transactionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('cancelTransaction', 'relayerId', relayerId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('cancelTransaction', 'transactionId', transactionId)
            const localVarPath = `/api/v1/relayers/{relayer_id}/transactions/{transaction_id}`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)))
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all pending transactions for a specific relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePendingTransactions: async (relayerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('deletePendingTransactions', 'relayerId', relayerId)
            const localVarPath = `/api/v1/relayers/{relayer_id}/transactions/pending`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves details of a specific relayer by ID.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelayer: async (relayerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('getRelayer', 'relayerId', relayerId)
            const localVarPath = `/api/v1/relayers/{relayer_id}`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the balance of a specific relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelayerBalance: async (relayerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('getRelayerBalance', 'relayerId', relayerId)
            const localVarPath = `/api/v1/relayers/{relayer_id}/balance`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetches the current status of a specific relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelayerStatus: async (relayerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('getRelayerStatus', 'relayerId', relayerId)
            const localVarPath = `/api/v1/relayers/{relayer_id}/status`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a specific transaction by its ID.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {string} transactionId The unique identifier of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionById: async (relayerId: string, transactionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('getTransactionById', 'relayerId', relayerId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getTransactionById', 'transactionId', transactionId)
            const localVarPath = `/api/v1/relayers/{relayer_id}/transactions/{transaction_id}`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)))
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a transaction by its nonce value.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {number} nonce The nonce of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionByNonce: async (relayerId: string, nonce: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('getTransactionByNonce', 'relayerId', relayerId)
            // verify required parameter 'nonce' is not null or undefined
            assertParamExists('getTransactionByNonce', 'nonce', nonce)
            const localVarPath = `/api/v1/relayers/{relayer_id}/transactions/by-nonce/{nonce}`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)))
                .replace(`{${"nonce"}}`, encodeURIComponent(String(nonce)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists all relayers with pagination support.
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelayers: async (page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/relayers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists all transactions for a specific relayer with pagination.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactions: async (relayerId: string, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('listTransactions', 'relayerId', relayerId)
            const localVarPath = `/api/v1/relayers/{relayer_id}/transactions/`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs a JSON-RPC call using the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {JsonRpcRequestNetworkRpcRequest} jsonRpcRequestNetworkRpcRequest JSON-RPC request with method and parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rpc: async (relayerId: string, jsonRpcRequestNetworkRpcRequest: JsonRpcRequestNetworkRpcRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('rpc', 'relayerId', relayerId)
            // verify required parameter 'jsonRpcRequestNetworkRpcRequest' is not null or undefined
            assertParamExists('rpc', 'jsonRpcRequestNetworkRpcRequest', jsonRpcRequestNetworkRpcRequest)
            const localVarPath = `/api/v1/relayers/{relayer_id}/rpc`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonRpcRequestNetworkRpcRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends a transaction through the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {NetworkTransactionRequest} networkTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTransaction: async (relayerId: string, networkTransactionRequest: NetworkTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('sendTransaction', 'relayerId', relayerId)
            // verify required parameter 'networkTransactionRequest' is not null or undefined
            assertParamExists('sendTransaction', 'networkTransactionRequest', networkTransactionRequest)
            const localVarPath = `/api/v1/relayers/{relayer_id}/transactions`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(networkTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signs data using the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {SignDataRequest} signDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign: async (relayerId: string, signDataRequest: SignDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('sign', 'relayerId', relayerId)
            // verify required parameter 'signDataRequest' is not null or undefined
            assertParamExists('sign', 'signDataRequest', signDataRequest)
            const localVarPath = `/api/v1/relayers/{relayer_id}/sign`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signs typed data using the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {SignTypedDataRequest} signTypedDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signTypedData: async (relayerId: string, signTypedDataRequest: SignTypedDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('signTypedData', 'relayerId', relayerId)
            // verify required parameter 'signTypedDataRequest' is not null or undefined
            assertParamExists('signTypedData', 'signTypedDataRequest', signTypedDataRequest)
            const localVarPath = `/api/v1/relayers/{relayer_id}/sign-typed-data`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signTypedDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a relayer\'s information based on the provided update request.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {RelayerUpdateRequest} relayerUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRelayer: async (relayerId: string, relayerUpdateRequest: RelayerUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relayerId' is not null or undefined
            assertParamExists('updateRelayer', 'relayerId', relayerId)
            // verify required parameter 'relayerUpdateRequest' is not null or undefined
            assertParamExists('updateRelayer', 'relayerUpdateRequest', relayerUpdateRequest)
            const localVarPath = `/api/v1/relayers/{relayer_id}`
                .replace(`{${"relayer_id"}}`, encodeURIComponent(String(relayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(relayerUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RelayersApi - functional programming interface
 * @export
 */
export const RelayersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RelayersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cancels a specific transaction by its ID.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {string} transactionId The unique identifier of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelTransaction(relayerId: string, transactionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelTransaction(relayerId, transactionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.cancelTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes all pending transactions for a specific relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePendingTransactions(relayerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePendingTransactions(relayerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.deletePendingTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves details of a specific relayer by ID.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelayer(relayerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseRelayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelayer(relayerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.getRelayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves the balance of a specific relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelayerBalance(relayerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBalanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelayerBalance(relayerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.getRelayerBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetches the current status of a specific relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelayerStatus(relayerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBool>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelayerStatus(relayerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.getRelayerStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves a specific transaction by its ID.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {string} transactionId The unique identifier of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionById(relayerId: string, transactionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionById(relayerId, transactionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.getTransactionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves a transaction by its nonce value.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {number} nonce The nonce of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionByNonce(relayerId: string, nonce: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionByNonce(relayerId, nonce, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.getTransactionByNonce']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Lists all relayers with pagination support.
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRelayers(page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVecRelayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRelayers(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.listRelayers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Lists all transactions for a specific relayer with pagination.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactions(relayerId: string, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVecTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransactions(relayerId, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.listTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs a JSON-RPC call using the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {JsonRpcRequestNetworkRpcRequest} jsonRpcRequestNetworkRpcRequest JSON-RPC request with method and parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rpc(relayerId: string, jsonRpcRequestNetworkRpcRequest: JsonRpcRequestNetworkRpcRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonRpcResponseNetworkRpcResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rpc(relayerId, jsonRpcRequestNetworkRpcRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.rpc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Sends a transaction through the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {NetworkTransactionRequest} networkTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTransaction(relayerId: string, networkTransactionRequest: NetworkTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendTransaction(relayerId, networkTransactionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.sendTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Signs data using the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {SignDataRequest} signDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sign(relayerId: string, signDataRequest: SignDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseSignDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sign(relayerId, signDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.sign']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Signs typed data using the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {SignTypedDataRequest} signTypedDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signTypedData(relayerId: string, signTypedDataRequest: SignTypedDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseSignDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signTypedData(relayerId, signTypedDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.signTypedData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates a relayer\'s information based on the provided update request.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {RelayerUpdateRequest} relayerUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRelayer(relayerId: string, relayerUpdateRequest: RelayerUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseRelayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRelayer(relayerId, relayerUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RelayersApi.updateRelayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RelayersApi - factory interface
 * @export
 */
export const RelayersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RelayersApiFp(configuration)
    return {
        /**
         * 
         * @summary Cancels a specific transaction by its ID.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {string} transactionId The unique identifier of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTransaction(relayerId: string, transactionId: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTransactionResponse> {
            return localVarFp.cancelTransaction(relayerId, transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all pending transactions for a specific relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePendingTransactions(relayerId: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.deletePendingTransactions(relayerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves details of a specific relayer by ID.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelayer(relayerId: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseRelayerResponse> {
            return localVarFp.getRelayer(relayerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves the balance of a specific relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelayerBalance(relayerId: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBalanceResponse> {
            return localVarFp.getRelayerBalance(relayerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetches the current status of a specific relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelayerStatus(relayerId: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBool> {
            return localVarFp.getRelayerStatus(relayerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a specific transaction by its ID.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {string} transactionId The unique identifier of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionById(relayerId: string, transactionId: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTransactionResponse> {
            return localVarFp.getTransactionById(relayerId, transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a transaction by its nonce value.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {number} nonce The nonce of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionByNonce(relayerId: string, nonce: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTransactionResponse> {
            return localVarFp.getTransactionByNonce(relayerId, nonce, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists all relayers with pagination support.
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelayers(page?: number, perPage?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVecRelayerResponse> {
            return localVarFp.listRelayers(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists all transactions for a specific relayer with pagination.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactions(relayerId: string, page?: number, perPage?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVecTransactionResponse> {
            return localVarFp.listTransactions(relayerId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs a JSON-RPC call using the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {JsonRpcRequestNetworkRpcRequest} jsonRpcRequestNetworkRpcRequest JSON-RPC request with method and parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rpc(relayerId: string, jsonRpcRequestNetworkRpcRequest: JsonRpcRequestNetworkRpcRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonRpcResponseNetworkRpcResult> {
            return localVarFp.rpc(relayerId, jsonRpcRequestNetworkRpcRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sends a transaction through the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {NetworkTransactionRequest} networkTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTransaction(relayerId: string, networkTransactionRequest: NetworkTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTransactionResponse> {
            return localVarFp.sendTransaction(relayerId, networkTransactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Signs data using the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {SignDataRequest} signDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(relayerId: string, signDataRequest: SignDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseSignDataResponse> {
            return localVarFp.sign(relayerId, signDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Signs typed data using the specified relayer.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {SignTypedDataRequest} signTypedDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signTypedData(relayerId: string, signTypedDataRequest: SignTypedDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseSignDataResponse> {
            return localVarFp.signTypedData(relayerId, signTypedDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a relayer\'s information based on the provided update request.
         * @param {string} relayerId The unique identifier of the relayer
         * @param {RelayerUpdateRequest} relayerUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRelayer(relayerId: string, relayerUpdateRequest: RelayerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseRelayerResponse> {
            return localVarFp.updateRelayer(relayerId, relayerUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RelayersApi - object-oriented interface
 * @export
 * @class RelayersApi
 * @extends {BaseAPI}
 */
export class RelayersApi extends BaseAPI {
    /**
     * 
     * @summary Cancels a specific transaction by its ID.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {string} transactionId The unique identifier of the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public cancelTransaction(relayerId: string, transactionId: string, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).cancelTransaction(relayerId, transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all pending transactions for a specific relayer.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public deletePendingTransactions(relayerId: string, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).deletePendingTransactions(relayerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves details of a specific relayer by ID.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public getRelayer(relayerId: string, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).getRelayer(relayerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves the balance of a specific relayer.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public getRelayerBalance(relayerId: string, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).getRelayerBalance(relayerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetches the current status of a specific relayer.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public getRelayerStatus(relayerId: string, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).getRelayerStatus(relayerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a specific transaction by its ID.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {string} transactionId The unique identifier of the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public getTransactionById(relayerId: string, transactionId: string, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).getTransactionById(relayerId, transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a transaction by its nonce value.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {number} nonce The nonce of the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public getTransactionByNonce(relayerId: string, nonce: number, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).getTransactionByNonce(relayerId, nonce, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists all relayers with pagination support.
     * @param {number} [page] Page number for pagination (starts at 1)
     * @param {number} [perPage] Number of items per page (default: 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public listRelayers(page?: number, perPage?: number, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).listRelayers(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists all transactions for a specific relayer with pagination.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {number} [page] Page number for pagination (starts at 1)
     * @param {number} [perPage] Number of items per page (default: 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public listTransactions(relayerId: string, page?: number, perPage?: number, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).listTransactions(relayerId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs a JSON-RPC call using the specified relayer.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {JsonRpcRequestNetworkRpcRequest} jsonRpcRequestNetworkRpcRequest JSON-RPC request with method and parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public rpc(relayerId: string, jsonRpcRequestNetworkRpcRequest: JsonRpcRequestNetworkRpcRequest, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).rpc(relayerId, jsonRpcRequestNetworkRpcRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sends a transaction through the specified relayer.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {NetworkTransactionRequest} networkTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public sendTransaction(relayerId: string, networkTransactionRequest: NetworkTransactionRequest, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).sendTransaction(relayerId, networkTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Signs data using the specified relayer.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {SignDataRequest} signDataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public sign(relayerId: string, signDataRequest: SignDataRequest, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).sign(relayerId, signDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Signs typed data using the specified relayer.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {SignTypedDataRequest} signTypedDataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public signTypedData(relayerId: string, signTypedDataRequest: SignTypedDataRequest, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).signTypedData(relayerId, signTypedDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a relayer\'s information based on the provided update request.
     * @param {string} relayerId The unique identifier of the relayer
     * @param {RelayerUpdateRequest} relayerUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayersApi
     */
    public updateRelayer(relayerId: string, relayerUpdateRequest: RelayerUpdateRequest, options?: RawAxiosRequestConfig) {
        return RelayersApiFp(this.configuration).updateRelayer(relayerId, relayerUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

